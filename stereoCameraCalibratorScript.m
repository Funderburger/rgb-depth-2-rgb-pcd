% 80% Auto-generated by stereoCalibrator app on 29-Oct-2021
%-------------------------------------------------------

imagesFolder1 = 'data/pico/ir/';
imagesFolder2 = 'data/pico/rgb/';

if ~isfolder(imagesFolder1)
    errorMessage = sprintf('Error: The following folder does not exist:\n%s\nPlease specify a new folder.', imagesFolder);
    uiwait(warndlg(errorMessage));
    imagesFolder1 = uigetdir(); % Ask for a new one.
    if imagesFolder1 == 0
         % User clicked Cancel
         return;
    end
end

if ~isfolder(imagesFolder2)
    errorMessage = sprintf('Error: The following folder does not exist:\n%s\nPlease specify a new folder.', imagesFolder);
    uiwait(warndlg(errorMessage));
    imagesFolder2 = uigetdir(); % Ask for a new one.
    if imagesFolder2 == 0
         % User clicked Cancel
         return;
    end
end


filePattern1 = fullfile(imagesFolder1, '*.jpg'); % Change to whatever pattern you need.
theFiles1 = dir(filePattern1);
imageFileNames1 = {zeros(length(theFiles1))};
for k = 1 : length(theFiles1)
    baseFileName1 = theFiles1(k).name;
    fullFileName1 = fullfile(theFiles1(k).folder, baseFileName1);
    imageFileNames1{k} = fullFileName1;
end

filePattern2 = fullfile(imagesFolder2, '*.jpg'); % Change to whatever pattern you need.
theFiles2 = dir(filePattern2);
imageFileNames2 = {zeros(length(theFiles2))};
for k = 1 : length(theFiles2)
    baseFileName2 = theFiles2(k).name;
    fullFileName2 = fullfile(theFiles2(k).folder, baseFileName2);
    imageFileNames2{k} = fullFileName2;
end

% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames1, imageFileNames2);

imageFileNames1 = imageFileNames1(imagesUsed);
imageFileNames2 = imageFileNames2(imagesUsed);


% If you find any outliers in the Mean Reprojection Error graph plotted
% below, you can remove the outliers by specifying their position (the X
% coordinate) below and uncomment the next 7 lines

% outliers = ones(1,length(imageFileNames1));
% outliers([1, 9, 14]) = 0; 
% imageFileNames1 = imageFileNames1(boolean(outliers));
% imageFileNames2 = imageFileNames2(boolean(outliers));
% [imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames1, imageFileNames2);
% imageFileNames1 = imageFileNames1(imagesUsed);
% imageFileNames2 = imageFileNames2(imagesUsed);

% Generate world coordinates of the checkerboard keypoints
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Read one of the images from the first stereo pair
I1 = imread(imageFileNames1{1});
[mrows, ncols, ~] = size(I1);

% Calibrate the camera
[stereoParams, pairsUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% View reprojection errors
h1=figure; showReprojectionErrors(stereoParams);

% Visualize pattern locations
h2=figure; showExtrinsics(stereoParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, stereoParams);

% You can use the calibration data to rectify stereo images.
I2 = imread(imageFileNames2{1});
[J1, J2] = rectifyStereoImages(I1, I2, stereoParams);

save stereo_parameters.mat stereoParams
% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('StereoCalibrationAndSceneReconstructionExample')
% showdemo('DepthEstimationFromStereoVideoExample')
