% 80% Auto-generated by cameraCalibrator app on 28-Oct-2021
%-------------------------------------------------------


% Define images to process
imagesFolder = 'data/pico/ir/';

if ~isfolder(imagesFolder)
    errorMessage = sprintf('Error: The following folder does not exist:\n%s\nPlease specify a new folder.', imagesFolder);
    uiwait(warndlg(errorMessage));
    imagesFolder = uigetdir(); % Ask for a new one.
    if imagesFolder == 0
         % User clicked Cancel
         return;
    end
end

filePattern = fullfile(imagesFolder, '*.jpg'); % Change to whatever pattern you need.
theFiles = dir(filePattern);
imageFileNames = {zeros(length(theFiles))};
for k = 1 : length(theFiles)
    baseFileName = theFiles(k).name;
    fullFileName = fullfile(theFiles(k).folder, baseFileName);
    imageFileNames{k} = fullFileName;
end

% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);

imageFileNames = imageFileNames(imagesUsed);

% if you find any outliers in the Mean Reprojection Error graph plotted
% below, you can remove the outliers by specifying their position (the X
% coordinate) below and uncomment the next five lines

% outliers = ones(1,length(imageFileNames));
% outliers([1, 9]) = 0; 
% imageFileNames = imageFileNames(boolean(outliers));
% [imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
% imageFileNames = imageFileNames(imagesUsed);


% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
undistortedImage = undistortImage(originalImage, cameraParams);

save camera_calib_parameters.mat cameraParams
% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')
